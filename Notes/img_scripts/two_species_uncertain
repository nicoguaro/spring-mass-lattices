#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Plot dispersion curves for a two-species spring-mass lattice
considering uncertainty in the spacing between masses.

@author: Nicolas Guarin-Zapata
"""
from __future__ import division, print_function
import numpy as np
from numpy import sin, cos, sqrt
import matplotlib.pyplot as plt

plt.rcParams["mathtext.fontset"] =  "cm"


def E_Omega(k, mu, sigma):
    g = (1 + mu)**2 - 2*mu*(1 - cos(k))
    omega_m = sqrt(1 + mu - sqrt(g))
    omega_p = sqrt(1 + mu + sqrt(g))
    omega_m = omega_m - (k*sigma*mu)**2/(4*sqrt(g)*omega_m) *\
        (sin(k)**2/g - cos(k)/mu - sin(k)**2/(2*sqrt(g)*omega_m))
    omega_p = omega_p + (k*sigma*mu)**2/(4*sqrt(g)*omega_p) *\
        (sin(k)**2/g - cos(k)/mu - sin(k)**2/(2*sqrt(g)*omega_p))
    return omega_m, omega_p


def Var_Omega(k, mu, sigma):
    g = (1 + mu)**2 - 2*mu*(1 - cos(k))
    omega_m = sqrt(1 + mu - sqrt(g))
    omega_p = sqrt(1 + mu + sqrt(g))
    var_m = (k*sigma*mu)**2/(4*g*omega_m)*np.sin(k)**2 
    var_p = (k*sigma*mu)**2/(4*g*omega_p)*np.sin(k)**2 
    return var_m, var_p


#%% Single plot
npts = 100
colors = plt.cm.tab10(np.linspace(0, 1, 10))
k = np.linspace(0, np.pi, npts)
plt.figure(figsize=(6, 3))
for cont, sigma in  enumerate(np.linspace(0, 0.4, 5)):
    Omega_m, Omega_p  = E_Omega(k, 2, sigma)
    Var_m, Var_p = Var_Omega(k, 2, sigma)
    plt.subplot(1, 2, 1)
    plt.plot(k/np.pi, Omega_p, label=r"$\sigma_a/a = {:.1f}$".format(sigma))
    plt.plot(k/np.pi, Omega_m, color=colors[cont])
    plt.xticks(np.linspace(0, 1, 5))
    plt.xlabel(r"$k\bar{a}/\pi$")
    plt.ylabel(r"$\mathrm{E}[\Omega_{\pm}]$")
    plt.subplot(2, 2, 2)
    plt.plot(k/np.pi, Var_m)
    plt.ylabel(r"$\mathrm{Var}[\Omega_{-}]$")
    plt.xticks(np.linspace(0, 1, 5), [])
    plt.ylim(-0.01, 0.2)
    plt.subplot(2, 2, 4)
    plt.plot(k/np.pi, Var_p)
    plt.xlabel(r"$k\bar{a}/\pi$")
    plt.ylabel(r"$\mathrm{Var}[\Omega_{+}]$")
    plt.xticks(np.linspace(0, 1, 5))
    plt.ylim(-0.01, 0.2)

plt.subplot(1, 2, 1)
plt.tight_layout()
plt.legend(loc=2)
plt.savefig("../img/two_species_uncertain-mu=2.pdf", bbox_inches="tight")

#%% Several plots
plt.figure(figsize=(6, 3))
nvals = 6
sigma_vec = np.linspace(0, 0.5, nvals)
for cont, sigma in enumerate(sigma_vec):
    Omega_m, Omega_p  = E_Omega(k, 2, sigma)
    Var_m, Var_p = Var_Omega(k, 2, sigma)
    std_m = np.sqrt(Var_m)
    std_p = np.sqrt(Var_p)
    plt.subplot(2, 3, cont + 1)
    plt.fill_between(k/np.pi, Omega_m - std_m, y2=Omega_m + std_m,
                     alpha=0.4, color=colors[0])
    plt.fill_between(k/np.pi, Omega_p - std_p, y2=Omega_p + std_p,
                     alpha=0.4, color=colors[0])
    plt.plot(k/np.pi, Omega_p, color=colors[0])
    plt.plot(k/np.pi, Omega_m, color=colors[0])
    plt.title(r"$\sigma_a = {:.2f}$".format(sigma), fontsize=10)
    if cont >=3:
        plt.xlabel(r"$k\bar{a}/\pi$")
    else:
        plt.xticks([])
    if cont%3 == 0:
        plt.ylabel(r"$\bar\Omega \pm \sigma_\Omega$")
    else:
        plt.yticks([])

plt.savefig("../img/two_species_uncert_multiple-mu=2.pdf",
            bbox_inches="tight")

#%% Bandgap size
plt.figure(figsize=(3, 2))
nvals = 100
sigma_vec = np.linspace(0, 1, nvals)
bandgap_size = np.zeros((nvals))
for cont in range(nvals):
    sigma = sigma_vec[cont]
    Omega_m, Omega_p  = E_Omega(k, 2, sigma)
    Var_m, Var_p = Var_Omega(k, 2, sigma)
    std_m = np.sqrt(Var_m)
    std_p = np.sqrt(Var_p)
    bandgap_size[cont] = np.nanmin(Omega_p - std_p) - np.nanmax(Omega_m + std_m)

plt.plot(sigma_vec, bandgap_size)
plt.xlabel(r"$\sigma_a/\bar a$")
plt.ylabel("Bandgap size")
plt.savefig("../img/two_species_uncert_bandgap-mu=2.pdf",
            bbox_inches="tight")
plt.show()
